// ru/mindils/jb2/app/service/analysis/chain/ChainAnalysisResultUtils.java
package ru.mindils.jb2.app.service.analysis.chain;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.stereotype.Component;
import ru.mindils.jb2.app.service.analysis.VacancyScorer;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ü–µ–ø–æ—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
 */
@Component
public class ChainAnalysisResultUtils {

  private final ObjectMapper objectMapper;

  public ChainAnalysisResultUtils(ObjectMapper objectMapper) {
    this.objectMapper = objectMapper;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å JSON-–æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞
   */
  public JsonNode createReportJson(ChainAnalysisResult result) {
    ObjectNode report = objectMapper.createObjectNode();

    report.put("vacancyId", result.vacancyId());
    report.put("chainId", result.chainConfig().chainId().getId());
    report.put("success", result.success());
    report.put("timestamp", LocalDateTime.now().toString());

    if (result.errorMessage() != null) {
      report.put("errorMessage", result.errorMessage());
    }

    if (result.stoppedAt() != null) {
      report.put("stoppedAt", result.stoppedAt());
      report.put("stopReason", result.stopReason());
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    ObjectNode stepResults = objectMapper.createObjectNode();
    result.stepResults().forEach((stepId, stepResult) -> {
      ObjectNode stepNode = objectMapper.createObjectNode();
      stepNode.put("success", stepResult.shouldContinue());
      if (!stepResult.shouldContinue()) {
        stepNode.put("stopReason", stepResult.stopReason());
      }
      if (stepResult.stepData() != null) {
        stepNode.set("data", stepResult.stepData());
      }
      stepResults.set(stepId, stepNode);
    });
    report.set("stepResults", stepResults);

    // –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä
    if (result.finalScore() != null) {
      ObjectNode scoreNode = objectMapper.createObjectNode();
      scoreNode.put("totalScore", result.finalScore().totalScore());
      scoreNode.put("rating", result.finalScore().rating().toString());

      // –†–∞–∑–±–∏–≤–∫–∞ —Å–∫–æ—Ä–∞
      VacancyScorer.ScoreBreakdown breakdown = result.finalScore().breakdown();
      ObjectNode breakdownNode = objectMapper.createObjectNode();
      breakdownNode.put("javaScore", breakdown.javaScore);
      breakdownNode.put("jmixScore", breakdown.jmixScore);
      breakdownNode.put("aiScore", breakdown.aiScore);
      breakdownNode.put("workModeScore", breakdown.workModeScore);
      breakdownNode.put("socialSignificanceScore", breakdown.socialSignificanceScore);
      breakdownNode.put("roleTypeScore", breakdown.roleTypeScore);
      breakdownNode.put("positionLevelScore", breakdown.positionLevelScore);
      breakdownNode.put("stackScore", breakdown.stackScore);
      breakdownNode.put("salaryScore", breakdown.salaryScore);
      breakdownNode.put("companyScore", breakdown.companyScore);
      breakdownNode.put("completenessBonus", breakdown.completenessBonus);

      // –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      breakdownNode.put("primaryTotal", breakdown.primaryTotal);
      breakdownNode.put("socialTotal", breakdown.socialTotal);
      breakdownNode.put("technicalTotal", breakdown.technicalTotal);

      scoreNode.set("breakdown", breakdownNode);
      report.set("finalScore", scoreNode);
    }

    return report;
  }


  /**
   * –°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  public String createSummaryText(ChainAnalysisResult result) {
    StringBuilder summary = new StringBuilder();

    summary.append("–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ ").append(result.vacancyId());
    summary.append(" (—Ü–µ–ø–æ—á–∫–∞: ").append(result.chainConfig().chainId()).append(")");

    if (!result.success()) {
      summary.append(" - –û–®–ò–ë–ö–ê: ").append(result.errorMessage());
      return summary.toString();
    }

    if (result.stoppedAt() != null) {
      summary.append(" - –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —à–∞–≥–µ '").append(result.stoppedAt()).append("'");
      summary.append(" (").append(result.stopReason()).append(")");
    } else {
      summary.append(" - –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    if (result.finalScore() != null) {
      VacancyScorer.VacancyScore score = result.finalScore();
      summary.append(", –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä: ").append(score.totalScore());
      summary.append(" (").append(score.rating()).append(")");
      summary.append(" [").append(String.format("%.1f%%", score.getScorePercentage())).append("]");
    }

    return summary.toString();
  }


  /**
   * –ò–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  public Map<String, Object> extractKeyMetrics(ChainAnalysisResult result) {
    return Map.of(
        "vacancyId", result.vacancyId(),
        "chainId", result.chainConfig().chainId(),
        "success", result.success(),
        "stepsExecuted", result.stepResults().size(),
        "stoppedEarly", result.stoppedAt() != null,
        "finalScore", result.finalScore() != null ? result.finalScore().totalScore() : null,
        "rating", result.finalScore() != null ? result.finalScore().rating().toString() : null,
        "scorePercentage", result.finalScore() != null ? result.finalScore().getScorePercentage() : null
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
   */
  public String getExecutedStepsText(ChainAnalysisResult result) {
    return result.stepResults().entrySet().stream()
        .map(entry -> {
          String stepId = entry.getKey();
          ChainStepResult stepResult = entry.getValue();
          return stepId + (stepResult.shouldContinue() ? " ‚úì" : " ‚úó");
        })
        .collect(Collectors.joining(", "));
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∫–æ—Ä—É
   */
  public String createDetailedScoreReport(ChainAnalysisResult result) {
    if (result.finalScore() == null) {
      return "–°–∫–æ—Ä –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω";
    }

    VacancyScorer.VacancyScore score = result.finalScore();
    VacancyScorer.ScoreBreakdown breakdown = score.breakdown();

    StringBuilder report = new StringBuilder();
    report.append("=== –î–ï–¢–ê–õ–¨–ù–´–ô –°–ö–û–† ===\n");
    report.append("–û–±—â–∏–π —Å–∫–æ—Ä: ").append(score.totalScore())
        .append(" –∏–∑ ").append(VacancyScorer.VacancyScore.getMaxPossibleScore())
        .append(" (").append(String.format("%.1f%%", score.getScorePercentage())).append(")\n");
    report.append("–†–µ–π—Ç–∏–Ω–≥: ").append(score.getDescription()).append("\n\n");

    // –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (breakdown.primaryTotal > 0) {
      report.append("üìä –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ").append(breakdown.primaryTotal).append(" –±–∞–ª–ª–æ–≤\n");
      if (breakdown.javaScore > 0) report.append("  ‚Ä¢ Java: ").append(breakdown.javaScore).append("\n");
      if (breakdown.jmixScore > 0) report.append("  ‚Ä¢ Jmix: ").append(breakdown.jmixScore).append("\n");
      if (breakdown.aiScore > 0) report.append("  ‚Ä¢ AI: ").append(breakdown.aiScore).append("\n");
      report.append("\n");
    }

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (breakdown.socialTotal > 0) {
      report.append("üè† –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ").append(breakdown.socialTotal).append(" –±–∞–ª–ª–æ–≤\n");
      if (breakdown.workModeScore > 0) report.append("  ‚Ä¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: ").append(breakdown.workModeScore).append("\n");
      if (breakdown.socialSignificanceScore > 0) report.append("  ‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: ").append(breakdown.socialSignificanceScore).append("\n");
      report.append("\n");
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    if (breakdown.technicalTotal > 0) {
      report.append("‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: ").append(breakdown.technicalTotal).append(" –±–∞–ª–ª–æ–≤\n");
      if (breakdown.roleTypeScore > 0) report.append("  ‚Ä¢ –¢–∏–ø —Ä–æ–ª–∏: ").append(breakdown.roleTypeScore).append("\n");
      if (breakdown.positionLevelScore > 0) report.append("  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø–æ–∑–∏—Ü–∏–∏: ").append(breakdown.positionLevelScore).append("\n");
      if (breakdown.stackScore > 0) report.append("  ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫: ").append(breakdown.stackScore).append("\n");
      report.append("\n");
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    if (breakdown.salaryScore > 0 || breakdown.companyScore > 0 || breakdown.completenessBonus > 0) {
      report.append("‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã:\n");
      if (breakdown.salaryScore > 0) report.append("  ‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞: ").append(breakdown.salaryScore).append("\n");
      if (breakdown.companyScore > 0) report.append("  ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ").append(breakdown.companyScore).append("\n");
      if (breakdown.completenessBonus > 0) report.append("  ‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: ").append(breakdown.completenessBonus).append("\n");
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å–∫–æ—Ä–∞
    report.append("\nüí° –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: ").append(breakdown.getMainScoreReason());

    return report.toString();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  public AnalysisQuality assessAnalysisQuality(ChainAnalysisResult result) {
    if (!result.success()) {
      return new AnalysisQuality(
          QualityLevel.POOR,
          "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π",
          List.of("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞")
      );
    }

    int stepsCompleted = result.stepResults().size();
    boolean hasScore = result.finalScore() != null;
    boolean stoppedEarly = result.stoppedAt() != null;

    if (stepsCompleted >= 3 && hasScore && !stoppedEarly) {
      return new AnalysisQuality(
          QualityLevel.EXCELLENT,
          "–ü–æ–ª–Ω—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
          List.of()
      );
    } else if (stepsCompleted >= 2 && hasScore) {
      return new AnalysisQuality(
          QualityLevel.GOOD,
          "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
          stoppedEarly ? List.of("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞") : List.of()
      );
    } else if (stepsCompleted >= 1) {
      return new AnalysisQuality(
          QualityLevel.MODERATE,
          "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω",
          List.of("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∞–Ω–∞–ª–∏–∑–∞", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä")
      );
    } else {
      return new AnalysisQuality(
          QualityLevel.POOR,
          "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
          List.of("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
      );
    }
  }

  /**
   * –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  public static record AnalysisQuality(
      QualityLevel level,
      String description,
      java.util.List<String> recommendations
  ) {}

  /**
   * –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  public enum QualityLevel {
    EXCELLENT, GOOD, MODERATE, POOR
  }
}